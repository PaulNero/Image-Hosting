version: '3.8'

# Создаем сеть для взаимодействия контейнеров
networks:
  app_network:
    driver: bridge

volumes:
  images:
    driver: local
  logs:
    driver: local
  static:
    driver: local
  backups:
    driver: local

# Определяем сервисы
services:
  # Python приложение
  app:
    container_name: app
    # Путь к Dockerfile
    build:
      context: ../..  # Переходим в корень проекта
      dockerfile: config/docker/Dockerfile
    ports:
      - "8000:8000"  # Порт для отладки
    # Монтируем локальные директории
    volumes:
      - ../../data/images:/app/images  # Директория для изображений
      - ../../data/logs:/app/logs      # Директория для логов
      - ../../data/static:/app/static  # Статические файлы
      - ../../data/favicon.ico:/app/favicon.ico  # Фавикон
      - ../../data/backups:/app/backups  # Директория для бэкапов
    # Переменные окружения
    environment:
      - PYTHONUNBUFFERED=1  # Для корректного логирования
      - DB_HOST=db          # Хост базы данных
      - DB_PORT=5432        # Порт базы данных
      - DB_NAME=image_hosting
      - DB_USER=app
      - DB_PASSWORD=app_password
    networks:
      - app_network
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    # Проверка здоровья
    healthcheck:
      test: ["CMD-SHELL", "ls /app/static/ && echo 'Static dir exists'"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    # Зависимость от базы данных
    depends_on:
      db:
        condition: service_healthy

  # Nginx сервер
  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"  # Основной порт для веб-сервера
    # Монтируем конфигурацию и данные
    volumes:
      - ../../data/images:/app/images:ro  # Только для чтения
      - ../../data/static:/app/static:ro
      - ../../data/favicon.ico:/app/favicon.ico:ro
      - ../../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped

  # База данных PostgreSQL
  db:
    container_name: db
    image: postgres:15
    # Переменные окружения для инициализации БД
    environment:
      - POSTGRES_DB=image_hosting
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app_password
    # Монтируем директории для данных и бэкапов
    volumes:
      - ../../data/db:/var/lib/postgresql/data
      - ../../data/backups:/backups
    networks:
      - app_network
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
    # Проверка здоровья
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d image_hosting"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped